#!/bin/bash

echo " Extended Feature Enable Register"
echo " The extended-feature-enable register (EFER) contains control bits that enable additional processor"
echo " features not controlled by the legacy control registers. The EFER is a model-specific register (MSR)"
echo " with an address of C000_0080h (see “Model-Specific Registers (MSRs)” on page 58 for more"
echo " information on MSRs). It can be read and written only by privileged software"
echo ""
echo "  63                                                                  32 "
echo "  +--------------------------------------------------------------------+"
echo "  |                      Rserved, MBZ                                  |"
echo "  +--------------------------------------------------------------------+"
echo ""
echo "  31                  15   14    13   12   11  10 9  8               0  "
echo "  +--------------------------------------------------------------------+"
echo "  |   Rserved MBZ   |TCE|FFXSR|LMSLE|SVME|NXE|LMA|0|LME|  Rsv. RAZ |SCE|"
echo "  +--------------------------------------------------------------------+"
echo "                      |    |     |    |    |   |     |               |-- System Call Extensions R/W"
echo "                      |    |     |    |    |   |     |-- Long Mode Enable R/W"
echo "                      |    |     |    |    |   |-- Long Mode Active R/W"
echo "                      |    |     |    |    |-- No-Execute Enable R/W"
echo "                      |    |     |    |-- Secure Virtual Machine Enable R/W"
echo "                      |    |     |-- Long Mode Segment Limit Enable R/W"
echo "                      |    |-- Fast FXSAVE/FXRSTOR R/W"
echo "                      |-- Translation Cache Extension R/W"
echo " Bit 0: read/write. Setting this bit to 1 enables the SYSCALL and SYSRET instructions."
echo "        Application software can use these instructions for low-latency system calls"
echo "        and returns in a non-segmented (flat) address space."
echo " Bit 8: read/write. Setting this bit to 1 enables the processor to activate long mode."
echo "        Long mode is not activated until software enables paging some time later. When paging is"
echo "        enabled after LME is set to 1, the processor sets the EFER.LMA bit to 1, indicating that"
echo "        long mode is not only enabled but also active."
echo " Bit 10: read/write. This bit indicates that long mode is active. The processor sets LMA to 1"
echo "         when both long mode and paging have been enabled by system software."
echo " Bit 11: read/write. Setting this bit to 1 enables the no-execute pageprotection"
echo "         feature. The feature is disabled when this bit is cleared to 0"
echo " Bit 12: read/write. Enables the SVM extensions. When this bit is zero, the SVM"
echo "         instructions cause UD exceptions. EFER.SVME defaults to a reset"
echo "         value of zero. The effect of turning off EFER.SVME while a guest is running"
echo "         is undefined; therefore, the VMM should always prevent guests from writing EFER."
echo "         SVM extensions can be disabled by setting VM_CR.SVME_DISABLE."
echo " Bit 13: read/write. Setting this bit to 1 enables certain limit checks in 64-bit mode."
echo " Bit 14: read/write. Setting this bit to 1 enables the FXSAVE and FXRSTOR instructions to"
echo "         execute faster in 64-bit mode at CPL 0."
echo " Bit 15: read/write. Setting this bit to 1 changes how the INVLPG instruction operates"
echo "         on TLB entries. When this bit is 0, INVLPG will remove the target PTE"
echo "         from the TLB as well as all upper-level table entries that are cached in the TLB,"
echo "         whether or not they are associated with the target PTE. When this bit is set,"
echo "         INVLPG will remove the target PTE and only those upper-level entries that lead to"
echo "         the target PTE in the page table hierarchy, leaving unrelated upper-level entries"
echo "         intact. This may provide a performance benefit."



